# Generated by Django 3.0.7 on 2020-06-09 19:57

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('patient_id', models.TextField(blank=True, db_column='patientId', null=True, unique=True)),
                ('patient_id_tier', models.IntegerField(blank=True, db_column='patientIdTier', null=True)),
                ('other_ids', models.TextField(blank=True, db_column='otherIds', null=True)),
                ('other_ids_tier', models.IntegerField(blank=True, db_column='otherIdsTier', null=True)),
                ('date_of_birth', models.TextField(blank=True, db_column='dateOfBirth', null=True)),
                ('date_of_birth_tier', models.IntegerField(blank=True, db_column='dateOfBirthTier', null=True)),
                ('gender', models.TextField(blank=True, null=True)),
                ('gender_tier', models.IntegerField(blank=True, db_column='genderTier', null=True)),
                ('ethnicity', models.TextField(blank=True, null=True)),
                ('ethnicity_tier', models.IntegerField(blank=True, db_column='ethnicityTier', null=True)),
                ('race', models.TextField(blank=True, null=True)),
                ('race_tier', models.IntegerField(blank=True, db_column='raceTier', null=True)),
                ('province_of_residence', models.TextField(blank=True, db_column='provinceOfResidence', null=True)),
                ('province_of_residence_tier', models.IntegerField(blank=True, db_column='provinceOfResidenceTier', null=True)),
                ('date_of_death', models.TextField(blank=True, db_column='dateOfDeath', null=True)),
                ('date_of_death_tier', models.IntegerField(blank=True, db_column='dateOfDeathTier', null=True)),
                ('cause_of_death', models.TextField(blank=True, db_column='causeOfDeath', null=True)),
                ('cause_of_death_tier', models.IntegerField(blank=True, db_column='causeOfDeathTier', null=True)),
                ('autopsy_tissue_for_research', models.TextField(blank=True, db_column='autopsyTissueForResearch', null=True)),
                ('autopsy_tissue_for_research_tier', models.IntegerField(blank=True, db_column='autopsyTissueForResearchTier', null=True)),
                ('prior_malignancy', models.TextField(blank=True, db_column='priorMalignancy', null=True)),
                ('prior_malignancy_tier', models.IntegerField(blank=True, db_column='priorMalignancyTier', null=True)),
                ('date_of_prior_malignancy', models.TextField(blank=True, db_column='dateOfPriorMalignancy', null=True)),
                ('date_of_prior_malignancy_tier', models.IntegerField(blank=True, db_column='dateOfPriorMalignancyTier', null=True)),
                ('family_history_and_risk_factors', models.TextField(blank=True, db_column='familyHistoryAndRiskFactors', null=True)),
                ('family_history_and_risk_factors_tier', models.IntegerField(blank=True, db_column='familyHistoryAndRiskFactorsTier', null=True)),
                ('family_history_of_predisposition_syndrome', models.TextField(blank=True, db_column='familyHistoryOfPredispositionSyndrome', null=True)),
                ('family_history_of_predisposition_syndrome_tier', models.IntegerField(blank=True, db_column='familyHistoryOfPredispositionSyndromeTier', null=True)),
                ('details_of_predisposition_syndrome', models.TextField(blank=True, db_column='detailsOfPredispositionSyndrome', null=True)),
                ('details_of_predisposition_syndrome_tier', models.IntegerField(blank=True, db_column='detailsOfPredispositionSyndromeTier', null=True)),
                ('genetic_cancer_syndrome', models.TextField(blank=True, db_column='geneticCancerSyndrome', null=True)),
                ('genetic_cancer_syndrome_tier', models.IntegerField(blank=True, db_column='geneticCancerSyndromeTier', null=True)),
                ('other_genetic_condition_or_significant_comorbidity', models.TextField(blank=True, db_column='otherGeneticConditionOrSignificantComorbidity', null=True)),
                ('other_genetic_condition_or_significant_comorbidity_tier', models.IntegerField(blank=True, db_column='otherGeneticConditionOrSignificantComorbidityTier', null=True)),
                ('occupational_or_environmental_exposure', models.TextField(blank=True, db_column='occupationalOrEnvironmentalExposure', null=True)),
                ('occupational_or_environmental_exposure_tier', models.IntegerField(blank=True, db_column='occupationalOrEnvironmentalExposureTier', null=True)),
            ],
            options={
                'db_table': 'patient',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('patient_id_tier', models.IntegerField(blank=True, db_column='patientIdTier', null=True)),
                ('sample_id', models.TextField(blank=True, db_column='sampleId', null=True, unique=True)),
                ('sample_id_tier', models.IntegerField(blank=True, db_column='sampleIdTier', null=True)),
                ('diagnosis_id', models.TextField(blank=True, db_column='diagnosisId', null=True)),
                ('diagnosis_id_tier', models.IntegerField(blank=True, db_column='diagnosisIdTier', null=True)),
                ('local_biobank_id', models.TextField(blank=True, db_column='localBiobankId', null=True)),
                ('local_biobank_id_tier', models.IntegerField(blank=True, db_column='localBiobankIdTier', null=True)),
                ('collection_date', models.TextField(blank=True, db_column='collectionDate', null=True)),
                ('collection_date_tier', models.IntegerField(blank=True, db_column='collectionDateTier', null=True)),
                ('collection_hospital', models.TextField(blank=True, db_column='collectionHospital', null=True)),
                ('collection_hospital_tier', models.IntegerField(blank=True, db_column='collectionHospitalTier', null=True)),
                ('sample_type', models.TextField(blank=True, db_column='sampleType', null=True)),
                ('sample_type_tier', models.IntegerField(blank=True, db_column='sampleTypeTier', null=True)),
                ('tissue_disease_state', models.TextField(blank=True, db_column='tissueDiseaseState', null=True)),
                ('tissue_disease_state_tier', models.IntegerField(blank=True, db_column='tissueDiseaseStateTier', null=True)),
                ('anatomic_site_the_sample_obtained_from', models.TextField(blank=True, db_column='anatomicSiteTheSampleObtainedFrom', null=True)),
                ('anatomic_site_the_sample_obtained_from_tier', models.IntegerField(blank=True, db_column='anatomicSiteTheSampleObtainedFromTier', null=True)),
                ('cancer_type', models.TextField(blank=True, db_column='cancerType', null=True)),
                ('cancer_type_tier', models.IntegerField(blank=True, db_column='cancerTypeTier', null=True)),
                ('cancer_subtype', models.TextField(blank=True, db_column='cancerSubtype', null=True)),
                ('cancer_subtype_tier', models.IntegerField(blank=True, db_column='cancerSubtypeTier', null=True)),
                ('pathology_report_id', models.TextField(blank=True, db_column='pathologyReportId', null=True)),
                ('pathology_report_id_tier', models.IntegerField(blank=True, db_column='pathologyReportIdTier', null=True)),
                ('morphological_code', models.TextField(blank=True, db_column='morphologicalCode', null=True)),
                ('morphological_code_tier', models.IntegerField(blank=True, db_column='morphologicalCodeTier', null=True)),
                ('topological_code', models.TextField(blank=True, db_column='topologicalCode', null=True)),
                ('topological_code_tier', models.IntegerField(blank=True, db_column='topologicalCodeTier', null=True)),
                ('shipping_date', models.TextField(blank=True, db_column='shippingDate', null=True)),
                ('shipping_date_tier', models.IntegerField(blank=True, db_column='shippingDateTier', null=True)),
                ('received_date', models.TextField(blank=True, db_column='receivedDate', null=True)),
                ('received_date_tier', models.IntegerField(blank=True, db_column='receivedDateTier', null=True)),
                ('quality_control_performed', models.TextField(blank=True, db_column='qualityControlPerformed', null=True)),
                ('quality_control_performed_tier', models.IntegerField(blank=True, db_column='qualityControlPerformedTier', null=True)),
                ('estimated_tumor_content', models.TextField(blank=True, db_column='estimatedTumorContent', null=True)),
                ('estimated_tumor_content_tier', models.IntegerField(blank=True, db_column='estimatedTumorContentTier', null=True)),
                ('quantity', models.TextField(blank=True, null=True)),
                ('quantity_tier', models.IntegerField(blank=True, db_column='quantityTier', null=True)),
                ('units', models.TextField(blank=True, null=True)),
                ('units_tier', models.IntegerField(blank=True, db_column='unitsTier', null=True)),
                ('associated_biobank', models.TextField(blank=True, db_column='associatedBiobank', null=True)),
                ('associated_biobank_tier', models.IntegerField(blank=True, db_column='associatedBiobankTier', null=True)),
                ('other_biobank', models.TextField(blank=True, db_column='otherBiobank', null=True)),
                ('other_biobank_tier', models.IntegerField(blank=True, db_column='otherBiobankTier', null=True)),
                ('sop_followed', models.TextField(blank=True, db_column='sopFollowed', null=True)),
                ('sop_followed_tier', models.IntegerField(blank=True, db_column='sopFollowedTier', null=True)),
                ('if_not_explain_any_deviation', models.TextField(blank=True, db_column='ifNotExplainAnyDeviation', null=True)),
                ('if_not_explain_any_deviation_tier', models.IntegerField(blank=True, db_column='ifNotExplainAnyDeviationTier', null=True)),
                ('recording_date', models.TextField(blank=True, db_column='recordingDate', null=True)),
                ('recording_date_tier', models.IntegerField(blank=True, db_column='recordingDateTier', null=True)),
                ('start_interval', models.TextField(blank=True, db_column='startInterval', null=True)),
                ('start_interval_tier', models.IntegerField(blank=True, db_column='startIntervalTier', null=True)),
                ('patient', models.ForeignKey(db_column='patientId', on_delete=django.db.models.deletion.DO_NOTHING, to='metadata.Patient', to_field='patient_id')),
            ],
            options={
                'db_table': 'sample',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Variantcalling',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('variant_calling_id', models.TextField(blank=True, db_column='variantCallingId', null=True)),
                ('variant_calling_id_tier', models.IntegerField(blank=True, db_column='variantCallingIdTier', null=True)),
                ('sample_id', models.TextField(blank=True, db_column='sampleId', null=True)),
                ('sample_id_tier', models.IntegerField(blank=True, db_column='sampleIdTier', null=True)),
                ('in_house_pipeline', models.TextField(blank=True, db_column='inHousePipeline', null=True)),
                ('in_house_pipeline_tier', models.IntegerField(blank=True, db_column='inHousePipelineTier', null=True)),
                ('variant_caller', models.TextField(blank=True, db_column='variantCaller', null=True)),
                ('variant_caller_tier', models.IntegerField(blank=True, db_column='variantCallerTier', null=True)),
                ('tabulate', models.TextField(blank=True, null=True)),
                ('tabulate_tier', models.IntegerField(blank=True, db_column='tabulateTier', null=True)),
                ('annotation', models.TextField(blank=True, null=True)),
                ('annotation_tier', models.IntegerField(blank=True, db_column='annotationTier', null=True)),
                ('merge_tool', models.TextField(blank=True, db_column='mergeTool', null=True)),
                ('merge_tool_tier', models.IntegerField(blank=True, db_column='mergeToolTier', null=True)),
                ('rda_to_tab', models.TextField(blank=True, db_column='rdaToTab', null=True)),
                ('rda_to_tab_tier', models.IntegerField(blank=True, db_column='rdaToTabTier', null=True)),
                ('delly', models.TextField(blank=True, null=True)),
                ('delly_tier', models.IntegerField(blank=True, db_column='dellyTier', null=True)),
                ('post_filter', models.TextField(blank=True, db_column='postFilter', null=True)),
                ('post_filter_tier', models.IntegerField(blank=True, db_column='postFilterTier', null=True)),
                ('clip_filter', models.TextField(blank=True, db_column='clipFilter', null=True)),
                ('clip_filter_tier', models.IntegerField(blank=True, db_column='clipFilterTier', null=True)),
                ('cosmic', models.TextField(blank=True, null=True)),
                ('cosmic_tier', models.IntegerField(blank=True, db_column='cosmicTier', null=True)),
                ('db_snp', models.TextField(blank=True, db_column='dbSnp', null=True)),
                ('db_snp_tier', models.IntegerField(blank=True, db_column='dbSnpTier', null=True)),
                ('alignment_id', models.TextField(blank=True, db_column='alignmentId', null=True)),
                ('alignment_id_tier', models.IntegerField(blank=True, db_column='alignmentIdTier', null=True)),
                ('site', models.TextField(blank=True, null=True)),
                ('site_tier', models.IntegerField(blank=True, db_column='siteTier', null=True)),
            ],
            options={
                'db_table': 'variantcalling',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Sequencing',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('sequencing_id', models.TextField(blank=True, db_column='sequencingId', null=True)),
                ('sequencing_id_tier', models.IntegerField(blank=True, db_column='sequencingIdTier', null=True)),
                ('sample_id', models.TextField(blank=True, db_column='sampleId', null=True)),
                ('sample_id_tier', models.IntegerField(blank=True, db_column='sampleIdTier', null=True)),
                ('dna_library_kit', models.TextField(blank=True, db_column='dnaLibraryKit', null=True)),
                ('dna_library_kit_tier', models.IntegerField(blank=True, db_column='dnaLibraryKitTier', null=True)),
                ('dna_seq_platform', models.TextField(blank=True, db_column='dnaSeqPlatform', null=True)),
                ('dna_seq_platform_tier', models.IntegerField(blank=True, db_column='dnaSeqPlatformTier', null=True)),
                ('dna_read_length', models.TextField(blank=True, db_column='dnaReadLength', null=True)),
                ('dna_read_length_tier', models.IntegerField(blank=True, db_column='dnaReadLengthTier', null=True)),
                ('rna_library_kit', models.TextField(blank=True, db_column='rnaLibraryKit', null=True)),
                ('rna_library_kit_tier', models.IntegerField(blank=True, db_column='rnaLibraryKitTier', null=True)),
                ('rna_seq_platform', models.TextField(blank=True, db_column='rnaSeqPlatform', null=True)),
                ('rna_seq_platform_tier', models.IntegerField(blank=True, db_column='rnaSeqPlatformTier', null=True)),
                ('rna_read_length', models.TextField(blank=True, db_column='rnaReadLength', null=True)),
                ('rna_read_length_tier', models.IntegerField(blank=True, db_column='rnaReadLengthTier', null=True)),
                ('pcr_cycles', models.TextField(blank=True, db_column='pcrCycles', null=True)),
                ('pcr_cycles_tier', models.IntegerField(blank=True, db_column='pcrCyclesTier', null=True)),
                ('extraction_id', models.TextField(blank=True, db_column='extractionId', null=True)),
                ('extraction_id_tier', models.IntegerField(blank=True, db_column='extractionIdTier', null=True)),
                ('site', models.TextField(blank=True, null=True)),
                ('site_tier', models.IntegerField(blank=True, db_column='siteTier', null=True)),
            ],
            options={
                'db_table': 'sequencing',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Fusiondetection',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('fusion_detection_id', models.TextField(blank=True, db_column='fusionDetectionId', null=True)),
                ('fusion_detection_id_tier', models.IntegerField(blank=True, db_column='fusionDetectionIdTier', null=True)),
                ('sample_id', models.TextField(blank=True, db_column='sampleId', null=True)),
                ('sample_id_tier', models.IntegerField(blank=True, db_column='sampleIdTier', null=True)),
                ('in_house_pipeline', models.TextField(blank=True, db_column='inHousePipeline', null=True)),
                ('in_house_pipeline_tier', models.IntegerField(blank=True, db_column='inHousePipelineTier', null=True)),
                ('sv_detection', models.TextField(blank=True, db_column='svDetection', null=True)),
                ('sv_detection_tier', models.IntegerField(blank=True, db_column='svDetectionTier', null=True)),
                ('fusion_detection', models.TextField(blank=True, db_column='fusionDetection', null=True)),
                ('fusion_detection_tier', models.IntegerField(blank=True, db_column='fusionDetectionTier', null=True)),
                ('realignment', models.TextField(blank=True, null=True)),
                ('realignment_tier', models.IntegerField(blank=True, db_column='realignmentTier', null=True)),
                ('annotation', models.TextField(blank=True, null=True)),
                ('annotation_tier', models.IntegerField(blank=True, db_column='annotationTier', null=True)),
                ('genome_reference', models.TextField(blank=True, db_column='genomeReference', null=True)),
                ('genome_reference_tier', models.IntegerField(blank=True, db_column='genomeReferenceTier', null=True)),
                ('gene_models', models.TextField(blank=True, db_column='geneModels', null=True)),
                ('gene_models_tier', models.IntegerField(blank=True, db_column='geneModelsTier', null=True)),
                ('alignment_id', models.TextField(blank=True, db_column='alignmentId', null=True)),
                ('alignment_id_tier', models.IntegerField(blank=True, db_column='alignmentIdTier', null=True)),
                ('site', models.TextField(blank=True, null=True)),
                ('site_tier', models.IntegerField(blank=True, db_column='siteTier', null=True)),
            ],
            options={
                'db_table': 'fusiondetection',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Extraction',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('extraction_id', models.TextField(blank=True, db_column='extractionId', null=True)),
                ('extraction_id_tier', models.IntegerField(blank=True, db_column='extractionIdTier', null=True)),
                ('sample_id', models.TextField(blank=True, db_column='sampleId', null=True)),
                ('sample_id_tier', models.IntegerField(blank=True, db_column='sampleIdTier', null=True)),
                ('rna_blood', models.TextField(blank=True, db_column='rnaBlood', null=True)),
                ('rna_blood_tier', models.IntegerField(blank=True, db_column='rnaBloodTier', null=True)),
                ('dna_blood', models.TextField(blank=True, db_column='dnaBlood', null=True)),
                ('dna_blood_tier', models.IntegerField(blank=True, db_column='dnaBloodTier', null=True)),
                ('rna_tissue', models.TextField(blank=True, db_column='rnaTissue', null=True)),
                ('rna_tissue_tier', models.IntegerField(blank=True, db_column='rnaTissueTier', null=True)),
                ('dna_tissue', models.TextField(blank=True, db_column='dnaTissue', null=True)),
                ('dna_tissue_tier', models.IntegerField(blank=True, db_column='dnaTissueTier', null=True)),
                ('site', models.TextField(blank=True, null=True)),
                ('site_tier', models.IntegerField(blank=True, db_column='siteTier', null=True)),
            ],
            options={
                'db_table': 'extraction',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Expressionanalysis',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('expression_analysis_id', models.TextField(blank=True, db_column='expressionAnalysisId', null=True)),
                ('expression_analysis_id_tier', models.IntegerField(blank=True, db_column='expressionAnalysisIdTier', null=True)),
                ('sample_id', models.TextField(blank=True, db_column='sampleId', null=True)),
                ('sample_id_tier', models.IntegerField(blank=True, db_column='sampleIdTier', null=True)),
                ('read_length', models.TextField(blank=True, db_column='readLength', null=True)),
                ('read_length_tier', models.IntegerField(blank=True, db_column='readLengthTier', null=True)),
                ('reference', models.TextField(blank=True, null=True)),
                ('reference_tier', models.IntegerField(blank=True, db_column='referenceTier', null=True)),
                ('alignment_tool', models.TextField(blank=True, db_column='alignmentTool', null=True)),
                ('alignment_tool_tier', models.IntegerField(blank=True, db_column='alignmentToolTier', null=True)),
                ('bam_handling', models.TextField(blank=True, db_column='bamHandling', null=True)),
                ('bam_handling_tier', models.IntegerField(blank=True, db_column='bamHandlingTier', null=True)),
                ('expression_estimation', models.TextField(blank=True, db_column='expressionEstimation', null=True)),
                ('expression_estimation_tier', models.IntegerField(blank=True, db_column='expressionEstimationTier', null=True)),
                ('sequencing_id', models.TextField(blank=True, db_column='sequencingId', null=True)),
                ('sequencing_id_tier', models.IntegerField(blank=True, db_column='sequencingIdTier', null=True)),
                ('site', models.TextField(blank=True, null=True)),
                ('site_tier', models.IntegerField(blank=True, db_column='siteTier', null=True)),
            ],
            options={
                'db_table': 'expressionanalysis',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Alignment',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('alignment_id', models.TextField(blank=True, db_column='alignmentId', null=True)),
                ('alignment_id_tier', models.IntegerField(blank=True, db_column='alignmentIdTier', null=True)),
                ('sample_id', models.TextField(blank=True, db_column='sampleId', null=True)),
                ('sample_id_tier', models.IntegerField(blank=True, db_column='sampleIdTier', null=True)),
                ('in_house_pipeline', models.TextField(blank=True, db_column='inHousePipeline', null=True)),
                ('in_house_pipeline_tier', models.IntegerField(blank=True, db_column='inHousePipelineTier', null=True)),
                ('alignment_tool', models.TextField(blank=True, db_column='alignmentTool', null=True)),
                ('alignment_tool_tier', models.IntegerField(blank=True, db_column='alignmentToolTier', null=True)),
                ('merge_tool', models.TextField(blank=True, db_column='mergeTool', null=True)),
                ('merge_tool_tier', models.IntegerField(blank=True, db_column='mergeToolTier', null=True)),
                ('mark_duplicates', models.TextField(blank=True, db_column='markDuplicates', null=True)),
                ('mark_duplicates_tier', models.IntegerField(blank=True, db_column='markDuplicatesTier', null=True)),
                ('realigner_target', models.TextField(blank=True, db_column='realignerTarget', null=True)),
                ('realigner_target_tier', models.IntegerField(blank=True, db_column='realignerTargetTier', null=True)),
                ('indel_realigner', models.TextField(blank=True, db_column='indelRealigner', null=True)),
                ('indel_realigner_tier', models.IntegerField(blank=True, db_column='indelRealignerTier', null=True)),
                ('base_recalibrator', models.TextField(blank=True, db_column='baseRecalibrator', null=True)),
                ('base_recalibrator_tier', models.IntegerField(blank=True, db_column='baseRecalibratorTier', null=True)),
                ('print_reads', models.TextField(blank=True, db_column='printReads', null=True)),
                ('print_reads_tier', models.IntegerField(blank=True, db_column='printReadsTier', null=True)),
                ('idx_stats', models.TextField(blank=True, db_column='idxStats', null=True)),
                ('idx_stats_tier', models.IntegerField(blank=True, db_column='idxStatsTier', null=True)),
                ('flag_stat', models.TextField(blank=True, db_column='flagStat', null=True)),
                ('flag_stat_tier', models.IntegerField(blank=True, db_column='flagStatTier', null=True)),
                ('coverage', models.TextField(blank=True, null=True)),
                ('coverage_tier', models.IntegerField(blank=True, db_column='coverageTier', null=True)),
                ('insert_size_metrics', models.TextField(blank=True, db_column='insertSizeMetrics', null=True)),
                ('insert_size_metrics_tier', models.IntegerField(blank=True, db_column='insertSizeMetricsTier', null=True)),
                ('fastqc', models.TextField(blank=True, null=True)),
                ('fastqc_tier', models.IntegerField(blank=True, db_column='fastqcTier', null=True)),
                ('reference', models.TextField(blank=True, null=True)),
                ('reference_tier', models.IntegerField(blank=True, db_column='referenceTier', null=True)),
                ('sequencing_id', models.TextField(blank=True, db_column='sequencingId', null=True)),
                ('sequencing_id_tier', models.IntegerField(blank=True, db_column='sequencingIdTier', null=True)),
                ('site', models.TextField(blank=True, null=True)),
                ('site_tier', models.IntegerField(blank=True, db_column='siteTier', null=True)),
            ],
            options={
                'db_table': 'alignment',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Tumourboard',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('patient_id_tier', models.IntegerField(blank=True, db_column='patientIdTier', null=True)),
                ('date_of_molecular_tumor_board', models.TextField(blank=True, db_column='dateOfMolecularTumorBoard', null=True)),
                ('date_of_molecular_tumor_board_tier', models.IntegerField(blank=True, db_column='dateOfMolecularTumorBoardTier', null=True)),
                ('type_of_sample_analyzed', models.TextField(blank=True, db_column='typeOfSampleAnalyzed', null=True)),
                ('type_of_sample_analyzed_tier', models.IntegerField(blank=True, db_column='typeOfSampleAnalyzedTier', null=True)),
                ('type_of_tumour_sample_analyzed', models.TextField(blank=True, db_column='typeOfTumourSampleAnalyzed', null=True)),
                ('type_of_tumour_sample_analyzed_tier', models.IntegerField(blank=True, db_column='typeOfTumourSampleAnalyzedTier', null=True)),
                ('analyses_discussed', models.TextField(blank=True, db_column='analysesDiscussed', null=True)),
                ('analyses_discussed_tier', models.IntegerField(blank=True, db_column='analysesDiscussedTier', null=True)),
                ('somatic_sample_type', models.TextField(blank=True, db_column='somaticSampleType', null=True)),
                ('somatic_sample_type_tier', models.IntegerField(blank=True, db_column='somaticSampleTypeTier', null=True)),
                ('normal_expression_comparator', models.TextField(blank=True, db_column='normalExpressionComparator', null=True)),
                ('normal_expression_comparator_tier', models.IntegerField(blank=True, db_column='normalExpressionComparatorTier', null=True)),
                ('disease_expression_comparator', models.TextField(blank=True, db_column='diseaseExpressionComparator', null=True)),
                ('disease_expression_comparator_tier', models.IntegerField(blank=True, db_column='diseaseExpressionComparatorTier', null=True)),
                ('has_a_germline_variant_been_identified_by_profiling_that_may_predispose_to_cancer', models.TextField(blank=True, db_column='hasAGermlineVariantBeenIdentifiedByProfilingThatMayPredisposeToCancer', null=True)),
                ('has_a_germline_variant_been_identified_by_profiling_that_may_predispose_to_cancer_tier', models.IntegerField(blank=True, db_column='hasAGermlineVariantBeenIdentifiedByProfilingThatMayPredisposeToCancerTier', null=True)),
                ('actionable_target_found', models.TextField(blank=True, db_column='actionableTargetFound', null=True)),
                ('actionable_target_found_tier', models.IntegerField(blank=True, db_column='actionableTargetFoundTier', null=True)),
                ('molecular_tumor_board_recommendation', models.TextField(blank=True, db_column='molecularTumorBoardRecommendation', null=True)),
                ('molecular_tumor_board_recommendation_tier', models.IntegerField(blank=True, db_column='molecularTumorBoardRecommendationTier', null=True)),
                ('germline_dna_sample_id', models.TextField(blank=True, db_column='germlineDnaSampleId', null=True)),
                ('germline_dna_sample_id_tier', models.IntegerField(blank=True, db_column='germlineDnaSampleIdTier', null=True)),
                ('tumor_dna_sample_id', models.TextField(blank=True, db_column='tumorDnaSampleId', null=True)),
                ('tumor_dna_sample_id_tier', models.IntegerField(blank=True, db_column='tumorDnaSampleIdTier', null=True)),
                ('tumor_rna_sample_id', models.TextField(blank=True, db_column='tumorRnaSampleId', null=True)),
                ('tumor_rna_sample_id_tier', models.IntegerField(blank=True, db_column='tumorRnaSampleIdTier', null=True)),
                ('germline_snv_discussed', models.TextField(blank=True, db_column='germlineSnvDiscussed', null=True)),
                ('germline_snv_discussed_tier', models.IntegerField(blank=True, db_column='germlineSnvDiscussedTier', null=True)),
                ('somatic_snv_discussed', models.TextField(blank=True, db_column='somaticSnvDiscussed', null=True)),
                ('somatic_snv_discussed_tier', models.IntegerField(blank=True, db_column='somaticSnvDiscussedTier', null=True)),
                ('cnvs_discussed', models.TextField(blank=True, db_column='cnvsDiscussed', null=True)),
                ('cnvs_discussed_tier', models.IntegerField(blank=True, db_column='cnvsDiscussedTier', null=True)),
                ('structural_variant_discussed', models.TextField(blank=True, db_column='structuralVariantDiscussed', null=True)),
                ('structural_variant_discussed_tier', models.IntegerField(blank=True, db_column='structuralVariantDiscussedTier', null=True)),
                ('classification_of_variants', models.TextField(blank=True, db_column='classificationOfVariants', null=True)),
                ('classification_of_variants_tier', models.IntegerField(blank=True, db_column='classificationOfVariantsTier', null=True)),
                ('clinical_validation_progress', models.TextField(blank=True, db_column='clinicalValidationProgress', null=True)),
                ('clinical_validation_progress_tier', models.IntegerField(blank=True, db_column='clinicalValidationProgressTier', null=True)),
                ('type_of_validation', models.TextField(blank=True, db_column='typeOfValidation', null=True)),
                ('type_of_validation_tier', models.IntegerField(blank=True, db_column='typeOfValidationTier', null=True)),
                ('agent_or_drug_class', models.TextField(blank=True, db_column='agentOrDrugClass', null=True)),
                ('agent_or_drug_class_tier', models.IntegerField(blank=True, db_column='agentOrDrugClassTier', null=True)),
                ('level_of_evidence_for_expression_target_agent_match', models.TextField(blank=True, db_column='levelOfEvidenceForExpressionTargetAgentMatch', null=True)),
                ('level_of_evidence_for_expression_target_agent_match_tier', models.IntegerField(blank=True, db_column='levelOfEvidenceForExpressionTargetAgentMatchTier', null=True)),
                ('did_treatment_plan_change_based_on_profiling_result', models.TextField(blank=True, db_column='didTreatmentPlanChangeBasedOnProfilingResult', null=True)),
                ('did_treatment_plan_change_based_on_profiling_result_tier', models.IntegerField(blank=True, db_column='didTreatmentPlanChangeBasedOnProfilingResultTier', null=True)),
                ('how_treatment_has_altered_based_on_profiling', models.TextField(blank=True, db_column='howTreatmentHasAlteredBasedOnProfiling', null=True)),
                ('how_treatment_has_altered_based_on_profiling_tier', models.IntegerField(blank=True, db_column='howTreatmentHasAlteredBasedOnProfilingTier', null=True)),
                ('reason_treatment_plan_did_not_change_based_on_profiling', models.TextField(blank=True, db_column='reasonTreatmentPlanDidNotChangeBasedOnProfiling', null=True)),
                ('reason_treatment_plan_did_not_change_based_on_profiling_tier', models.IntegerField(blank=True, db_column='reasonTreatmentPlanDidNotChangeBasedOnProfilingTier', null=True)),
                ('details_of_treatment_plan_impact', models.TextField(blank=True, db_column='detailsOfTreatmentPlanImpact', null=True)),
                ('details_of_treatment_plan_impact_tier', models.IntegerField(blank=True, db_column='detailsOfTreatmentPlanImpactTier', null=True)),
                ('patient_or_family_informed_of_germline_variant', models.TextField(blank=True, db_column='patientOrFamilyInformedOfGermlineVariant', null=True)),
                ('patient_or_family_informed_of_germline_variant_tier', models.IntegerField(blank=True, db_column='patientOrFamilyInformedOfGermlineVariantTier', null=True)),
                ('patient_has_been_referred_to_a_hereditary_cancer_program_based_on_this_molecular_profiling', models.TextField(blank=True, db_column='patientHasBeenReferredToAHereditaryCancerProgramBasedOnThisMolecularProfiling', null=True)),
                ('patient_has_been_referred_to_a_hereditary_cancer_program_based_on_this_molecular_profiling_tier', models.IntegerField(blank=True, db_column='patientHasBeenReferredToAHereditaryCancerProgramBasedOnThisMolecularProfilingTier', null=True)),
                ('summary_report', models.TextField(blank=True, db_column='summaryReport', null=True)),
                ('summary_report_tier', models.IntegerField(blank=True, db_column='summaryReportTier', null=True)),
                ('patient', models.ForeignKey(db_column='patientId', on_delete=django.db.models.deletion.DO_NOTHING, to='metadata.Patient', to_field='patient_id')),
            ],
            options={
                'db_table': 'tumourboard',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Treatment',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('patient_id_tier', models.IntegerField(blank=True, db_column='patientIdTier', null=True)),
                ('course_number', models.TextField(blank=True, db_column='courseNumber', null=True)),
                ('course_number_tier', models.IntegerField(blank=True, db_column='courseNumberTier', null=True)),
                ('therapeutic_modality', models.TextField(blank=True, db_column='therapeuticModality', null=True)),
                ('therapeutic_modality_tier', models.IntegerField(blank=True, db_column='therapeuticModalityTier', null=True)),
                ('systematic_therapy_agent_name', models.TextField(blank=True, db_column='systematicTherapyAgentName', null=True)),
                ('systematic_therapy_agent_name_tier', models.IntegerField(blank=True, db_column='systematicTherapyAgentNameTier', null=True)),
                ('treatment_plan_type', models.TextField(blank=True, db_column='treatmentPlanType', null=True)),
                ('treatment_plan_type_tier', models.IntegerField(blank=True, db_column='treatmentPlanTypeTier', null=True)),
                ('treatment_intent', models.TextField(blank=True, db_column='treatmentIntent', null=True)),
                ('treatment_intent_tier', models.IntegerField(blank=True, db_column='treatmentIntentTier', null=True)),
                ('start_date', models.TextField(blank=True, db_column='startDate', null=True)),
                ('start_date_tier', models.IntegerField(blank=True, db_column='startDateTier', null=True)),
                ('stop_date', models.TextField(blank=True, db_column='stopDate', null=True)),
                ('stop_date_tier', models.IntegerField(blank=True, db_column='stopDateTier', null=True)),
                ('reason_for_ending_the_treatment', models.TextField(blank=True, db_column='reasonForEndingTheTreatment', null=True)),
                ('reason_for_ending_the_treatment_tier', models.IntegerField(blank=True, db_column='reasonForEndingTheTreatmentTier', null=True)),
                ('response_to_treatment', models.TextField(blank=True, db_column='responseToTreatment', null=True)),
                ('response_to_treatment_tier', models.IntegerField(blank=True, db_column='responseToTreatmentTier', null=True)),
                ('response_criteria_used', models.TextField(blank=True, db_column='responseCriteriaUsed', null=True)),
                ('response_criteria_used_tier', models.IntegerField(blank=True, db_column='responseCriteriaUsedTier', null=True)),
                ('date_of_recurrence_or_progression_after_this_treatment', models.TextField(blank=True, db_column='dateOfRecurrenceOrProgressionAfterThisTreatment', null=True)),
                ('date_of_recurrence_or_progression_after_this_treatment_tier', models.IntegerField(blank=True, db_column='dateOfRecurrenceOrProgressionAfterThisTreatmentTier', null=True)),
                ('unexpected_or_unusual_toxicity_during_treatment', models.TextField(blank=True, db_column='unexpectedOrUnusualToxicityDuringTreatment', null=True)),
                ('unexpected_or_unusual_toxicity_during_treatment_tier', models.IntegerField(blank=True, db_column='unexpectedOrUnusualToxicityDuringTreatmentTier', null=True)),
                ('drug_id_numbers', models.TextField(blank=True, db_column='drugIdNumbers', null=True)),
                ('drug_id_numbers_tier', models.IntegerField(blank=True, db_column='drugIdNumbersTier', null=True)),
                ('diagnosis_id', models.TextField(blank=True, db_column='diagnosisId', null=True)),
                ('diagnosis_id_tier', models.IntegerField(blank=True, db_column='diagnosisIdTier', null=True)),
                ('treatment_plan_id', models.TextField(blank=True, db_column='treatmentPlanId', null=True)),
                ('treatment_plan_id_tier', models.IntegerField(blank=True, db_column='treatmentPlanIdTier', null=True)),
                ('patient', models.ForeignKey(db_column='patientId', on_delete=django.db.models.deletion.DO_NOTHING, to='metadata.Patient', to_field='patient_id')),
            ],
            options={
                'db_table': 'treatment',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Surgery',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('patient_id_tier', models.IntegerField(blank=True, db_column='patientIdTier', null=True)),
                ('start_date', models.TextField(blank=True, db_column='startDate', null=True)),
                ('start_date_tier', models.IntegerField(blank=True, db_column='startDateTier', null=True)),
                ('stop_date', models.TextField(blank=True, db_column='stopDate', null=True)),
                ('stop_date_tier', models.IntegerField(blank=True, db_column='stopDateTier', null=True)),
                ('sample_id_tier', models.IntegerField(blank=True, db_column='sampleIdTier', null=True)),
                ('collection_time_point', models.TextField(blank=True, db_column='collectionTimePoint', null=True)),
                ('collection_time_point_tier', models.IntegerField(blank=True, db_column='collectionTimePointTier', null=True)),
                ('diagnosis_date', models.TextField(blank=True, db_column='diagnosisDate', null=True)),
                ('diagnosis_date_tier', models.IntegerField(blank=True, db_column='diagnosisDateTier', null=True)),
                ('site', models.TextField(blank=True, null=True)),
                ('site_tier', models.IntegerField(blank=True, db_column='siteTier', null=True)),
                ('type', models.TextField(blank=True, null=True)),
                ('type_tier', models.IntegerField(blank=True, db_column='typeTier', null=True)),
                ('recording_date', models.TextField(blank=True, db_column='recordingDate', null=True)),
                ('recording_date_tier', models.IntegerField(blank=True, db_column='recordingDateTier', null=True)),
                ('treatment_plan_id', models.TextField(blank=True, db_column='treatmentPlanId', null=True)),
                ('treatment_plan_id_tier', models.IntegerField(blank=True, db_column='treatmentPlanIdTier', null=True)),
                ('course_number', models.TextField(blank=True, db_column='courseNumber', null=True)),
                ('course_number_tier', models.IntegerField(blank=True, db_column='courseNumberTier', null=True)),
                ('patient', models.ForeignKey(db_column='patientId', on_delete=django.db.models.deletion.DO_NOTHING, to='metadata.Patient', to_field='patient_id')),
                ('sample', models.ForeignKey(db_column='sampleId', on_delete=django.db.models.deletion.DO_NOTHING, to='metadata.Sample', to_field='sample_id')),
            ],
            options={
                'db_table': 'surgery',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('patient_id_tier', models.IntegerField(blank=True, db_column='patientIdTier', null=True)),
                ('start_date', models.TextField(blank=True, db_column='startDate', null=True)),
                ('start_date_tier', models.IntegerField(blank=True, db_column='startDateTier', null=True)),
                ('end_date', models.TextField(blank=True, db_column='endDate', null=True)),
                ('end_date_tier', models.IntegerField(blank=True, db_column='endDateTier', null=True)),
                ('status', models.TextField(blank=True, null=True)),
                ('status_tier', models.IntegerField(blank=True, db_column='statusTier', null=True)),
                ('recording_date', models.TextField(blank=True, db_column='recordingDate', null=True)),
                ('recording_date_tier', models.IntegerField(blank=True, db_column='recordingDateTier', null=True)),
                ('patient', models.ForeignKey(db_column='patientId', on_delete=django.db.models.deletion.DO_NOTHING, to='metadata.Patient', to_field='patient_id')),
            ],
            options={
                'db_table': 'study',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Slide',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('patient_id_tier', models.IntegerField(blank=True, db_column='patientIdTier', null=True)),
                ('sample_id', models.TextField(blank=True, db_column='sampleId', null=True)),
                ('sample_id_tier', models.IntegerField(blank=True, db_column='sampleIdTier', null=True)),
                ('slide_id', models.TextField(blank=True, db_column='slideId', null=True)),
                ('slide_id_tier', models.IntegerField(blank=True, db_column='slideIdTier', null=True)),
                ('slide_other_id', models.TextField(blank=True, db_column='slideOtherId', null=True)),
                ('slide_other_id_tier', models.IntegerField(blank=True, db_column='slideOtherIdTier', null=True)),
                ('lymphocyte_infiltration_percent', models.TextField(blank=True, db_column='lymphocyteInfiltrationPercent', null=True)),
                ('lymphocyte_infiltration_percent_tier', models.IntegerField(blank=True, db_column='lymphocyteInfiltrationPercentTier', null=True)),
                ('tumor_nuclei_percent', models.TextField(blank=True, db_column='tumorNucleiPercent', null=True)),
                ('tumor_nuclei_percent_tier', models.IntegerField(blank=True, db_column='tumorNucleiPercentTier', null=True)),
                ('monocyte_infiltration_percent', models.TextField(blank=True, db_column='monocyteInfiltrationPercent', null=True)),
                ('monocyte_infiltration_percent_tier', models.IntegerField(blank=True, db_column='monocyteInfiltrationPercentTier', null=True)),
                ('normal_cells_percent', models.TextField(blank=True, db_column='normalCellsPercent', null=True)),
                ('normal_cells_percent_tier', models.IntegerField(blank=True, db_column='normalCellsPercentTier', null=True)),
                ('tumor_cells_percent', models.TextField(blank=True, db_column='tumorCellsPercent', null=True)),
                ('tumor_cells_percent_tier', models.IntegerField(blank=True, db_column='tumorCellsPercentTier', null=True)),
                ('stromal_cells_percent', models.TextField(blank=True, db_column='stromalCellsPercent', null=True)),
                ('stromal_cells_percent_tier', models.IntegerField(blank=True, db_column='stromalCellsPercentTier', null=True)),
                ('eosinophil_infiltration_percent', models.TextField(blank=True, db_column='eosinophilInfiltrationPercent', null=True)),
                ('eosinophil_infiltration_percent_tier', models.IntegerField(blank=True, db_column='eosinophilInfiltrationPercentTier', null=True)),
                ('neutrophil_infiltration_percent', models.TextField(blank=True, db_column='neutrophilInfiltrationPercent', null=True)),
                ('neutrophil_infiltration_percent_tier', models.IntegerField(blank=True, db_column='neutrophilInfiltrationPercentTier', null=True)),
                ('granulocyte_infiltration_percent', models.TextField(blank=True, db_column='granulocyteInfiltrationPercent', null=True)),
                ('granulocyte_infiltration_percent_tier', models.IntegerField(blank=True, db_column='granulocyteInfiltrationPercentTier', null=True)),
                ('necrosis_percent', models.TextField(blank=True, db_column='necrosisPercent', null=True)),
                ('necrosis_percent_tier', models.IntegerField(blank=True, db_column='necrosisPercentTier', null=True)),
                ('inflammatory_infiltration_percent', models.TextField(blank=True, db_column='inflammatoryInfiltrationPercent', null=True)),
                ('inflammatory_infiltration_percent_tier', models.IntegerField(blank=True, db_column='inflammatoryInfiltrationPercentTier', null=True)),
                ('proliferating_cells_number', models.TextField(blank=True, db_column='proliferatingCellsNumber', null=True)),
                ('proliferating_cells_number_tier', models.IntegerField(blank=True, db_column='proliferatingCellsNumberTier', null=True)),
                ('section_location', models.TextField(blank=True, db_column='sectionLocation', null=True)),
                ('section_location_tier', models.IntegerField(blank=True, db_column='sectionLocationTier', null=True)),
                ('patient', models.ForeignKey(db_column='patientId', on_delete=django.db.models.deletion.DO_NOTHING, to='metadata.Patient', to_field='patient_id')),
            ],
            options={
                'db_table': 'slide',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Radiotherapy',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('patient_id_tier', models.IntegerField(blank=True, db_column='patientIdTier', null=True)),
                ('course_number', models.TextField(blank=True, db_column='courseNumber', null=True)),
                ('course_number_tier', models.IntegerField(blank=True, db_column='courseNumberTier', null=True)),
                ('start_date', models.TextField(blank=True, db_column='startDate', null=True)),
                ('start_date_tier', models.IntegerField(blank=True, db_column='startDateTier', null=True)),
                ('stop_date', models.TextField(blank=True, db_column='stopDate', null=True)),
                ('stop_date_tier', models.IntegerField(blank=True, db_column='stopDateTier', null=True)),
                ('therapeutic_modality', models.TextField(blank=True, db_column='therapeuticModality', null=True)),
                ('therapeutic_modality_tier', models.IntegerField(blank=True, db_column='therapeuticModalityTier', null=True)),
                ('baseline', models.TextField(blank=True, null=True)),
                ('baseline_tier', models.IntegerField(blank=True, db_column='baselineTier', null=True)),
                ('test_result', models.TextField(blank=True, db_column='testResult', null=True)),
                ('test_result_tier', models.IntegerField(blank=True, db_column='testResultTier', null=True)),
                ('test_result_std', models.TextField(blank=True, db_column='testResultStd', null=True)),
                ('test_result_std_tier', models.IntegerField(blank=True, db_column='testResultStdTier', null=True)),
                ('treating_centre_name', models.TextField(blank=True, db_column='treatingCentreName', null=True)),
                ('treating_centre_name_tier', models.IntegerField(blank=True, db_column='treatingCentreNameTier', null=True)),
                ('start_interval_rad', models.TextField(blank=True, db_column='startIntervalRad', null=True)),
                ('start_interval_rad_tier', models.IntegerField(blank=True, db_column='startIntervalRadTier', null=True)),
                ('start_interval_rad_raw', models.TextField(blank=True, db_column='startIntervalRadRaw', null=True)),
                ('start_interval_rad_raw_tier', models.IntegerField(blank=True, db_column='startIntervalRadRawTier', null=True)),
                ('recording_date', models.TextField(blank=True, db_column='recordingDate', null=True)),
                ('recording_date_tier', models.IntegerField(blank=True, db_column='recordingDateTier', null=True)),
                ('adjacent_fields', models.TextField(blank=True, db_column='adjacentFields', null=True)),
                ('adjacent_fields_tier', models.IntegerField(blank=True, db_column='adjacentFieldsTier', null=True)),
                ('adjacent_fractions', models.TextField(blank=True, db_column='adjacentFractions', null=True)),
                ('adjacent_fractions_tier', models.IntegerField(blank=True, db_column='adjacentFractionsTier', null=True)),
                ('complete', models.TextField(blank=True, null=True)),
                ('complete_tier', models.IntegerField(blank=True, db_column='completeTier', null=True)),
                ('brachytherapy_dose', models.TextField(blank=True, db_column='brachytherapyDose', null=True)),
                ('brachytherapy_dose_tier', models.IntegerField(blank=True, db_column='brachytherapyDoseTier', null=True)),
                ('radiotherapy_dose', models.TextField(blank=True, db_column='radiotherapyDose', null=True)),
                ('radiotherapy_dose_tier', models.IntegerField(blank=True, db_column='radiotherapyDoseTier', null=True)),
                ('site_number', models.TextField(blank=True, db_column='siteNumber', null=True)),
                ('site_number_tier', models.IntegerField(blank=True, db_column='siteNumberTier', null=True)),
                ('technique', models.TextField(blank=True, null=True)),
                ('technique_tier', models.IntegerField(blank=True, db_column='techniqueTier', null=True)),
                ('treated_region', models.TextField(blank=True, db_column='treatedRegion', null=True)),
                ('treated_region_tier', models.IntegerField(blank=True, db_column='treatedRegionTier', null=True)),
                ('treatment_plan_id', models.TextField(blank=True, db_column='treatmentPlanId', null=True)),
                ('treatment_plan_id_tier', models.IntegerField(blank=True, db_column='treatmentPlanIdTier', null=True)),
                ('radiation_type', models.TextField(blank=True, db_column='radiationType', null=True)),
                ('radiation_type_tier', models.IntegerField(blank=True, db_column='radiationTypeTier', null=True)),
                ('radiation_site', models.TextField(blank=True, db_column='radiationSite', null=True)),
                ('radiation_site_tier', models.IntegerField(blank=True, db_column='radiationSiteTier', null=True)),
                ('total_dose', models.TextField(blank=True, db_column='totalDose', null=True)),
                ('total_dose_tier', models.IntegerField(blank=True, db_column='totalDoseTier', null=True)),
                ('boost_site', models.TextField(blank=True, db_column='boostSite', null=True)),
                ('boost_site_tier', models.IntegerField(blank=True, db_column='boostSiteTier', null=True)),
                ('boost_dose', models.TextField(blank=True, db_column='boostDose', null=True)),
                ('boost_dose_tier', models.IntegerField(blank=True, db_column='boostDoseTier', null=True)),
                ('patient', models.ForeignKey(db_column='patientId', on_delete=django.db.models.deletion.DO_NOTHING, to='metadata.Patient', to_field='patient_id')),
            ],
            options={
                'db_table': 'radiotherapy',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Outcome',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('patient_id_tier', models.IntegerField(blank=True, db_column='patientIdTier', null=True)),
                ('physical_exam_id', models.TextField(blank=True, db_column='physicalExamId', null=True)),
                ('physical_exam_id_tier', models.IntegerField(blank=True, db_column='physicalExamIdTier', null=True)),
                ('date_of_assessment', models.TextField(blank=True, db_column='dateOfAssessment', null=True)),
                ('date_of_assessment_tier', models.IntegerField(blank=True, db_column='dateOfAssessmentTier', null=True)),
                ('disease_response_or_status', models.TextField(blank=True, db_column='diseaseResponseOrStatus', null=True)),
                ('disease_response_or_status_tier', models.IntegerField(blank=True, db_column='diseaseResponseOrStatusTier', null=True)),
                ('other_response_classification', models.TextField(blank=True, db_column='otherResponseClassification', null=True)),
                ('other_response_classification_tier', models.IntegerField(blank=True, db_column='otherResponseClassificationTier', null=True)),
                ('minimal_residual_disease_assessment', models.TextField(blank=True, db_column='minimalResidualDiseaseAssessment', null=True)),
                ('minimal_residual_disease_assessment_tier', models.IntegerField(blank=True, db_column='minimalResidualDiseaseAssessmentTier', null=True)),
                ('method_of_response_evaluation', models.TextField(blank=True, db_column='methodOfResponseEvaluation', null=True)),
                ('method_of_response_evaluation_tier', models.IntegerField(blank=True, db_column='methodOfResponseEvaluationTier', null=True)),
                ('response_criteria_used', models.TextField(blank=True, db_column='responseCriteriaUsed', null=True)),
                ('response_criteria_used_tier', models.IntegerField(blank=True, db_column='responseCriteriaUsedTier', null=True)),
                ('summary_stage', models.TextField(blank=True, db_column='summaryStage', null=True)),
                ('summary_stage_tier', models.IntegerField(blank=True, db_column='summaryStageTier', null=True)),
                ('sites_of_any_progression_or_recurrence', models.TextField(blank=True, db_column='sitesOfAnyProgressionOrRecurrence', null=True)),
                ('sites_of_any_progression_or_recurrence_tier', models.IntegerField(blank=True, db_column='sitesOfAnyProgressionOrRecurrenceTier', null=True)),
                ('vital_status', models.TextField(blank=True, db_column='vitalStatus', null=True)),
                ('vital_status_tier', models.IntegerField(blank=True, db_column='vitalStatusTier', null=True)),
                ('height', models.TextField(blank=True, null=True)),
                ('height_tier', models.IntegerField(blank=True, db_column='heightTier', null=True)),
                ('weight', models.TextField(blank=True, null=True)),
                ('weight_tier', models.IntegerField(blank=True, db_column='weightTier', null=True)),
                ('height_units', models.TextField(blank=True, db_column='heightUnits', null=True)),
                ('height_units_tier', models.IntegerField(blank=True, db_column='heightUnitsTier', null=True)),
                ('weight_units', models.TextField(blank=True, db_column='weightUnits', null=True)),
                ('weight_units_tier', models.IntegerField(blank=True, db_column='weightUnitsTier', null=True)),
                ('performance_status', models.TextField(blank=True, db_column='performanceStatus', null=True)),
                ('performance_status_tier', models.IntegerField(blank=True, db_column='performanceStatusTier', null=True)),
                ('overall_survival_in_months', models.TextField(blank=True, db_column='overallSurvivalInMonths', null=True)),
                ('overall_survival_in_months_tier', models.IntegerField(blank=True, db_column='overallSurvivalInMonthsTier', null=True)),
                ('disease_free_survival_in_months', models.TextField(blank=True, db_column='diseaseFreeSurvivalInMonths', null=True)),
                ('disease_free_survival_in_months_tier', models.IntegerField(blank=True, db_column='diseaseFreeSurvivalInMonthsTier', null=True)),
                ('patient', models.ForeignKey(db_column='patientId', on_delete=django.db.models.deletion.DO_NOTHING, to='metadata.Patient', to_field='patient_id')),
            ],
            options={
                'db_table': 'outcome',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Labtest',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('patient_id_tier', models.IntegerField(blank=True, db_column='patientIdTier', null=True)),
                ('start_date', models.TextField(blank=True, db_column='startDate', null=True)),
                ('start_date_tier', models.IntegerField(blank=True, db_column='startDateTier', null=True)),
                ('collection_date', models.TextField(blank=True, db_column='collectionDate', null=True)),
                ('collection_date_tier', models.IntegerField(blank=True, db_column='collectionDateTier', null=True)),
                ('end_date', models.TextField(blank=True, db_column='endDate', null=True)),
                ('end_date_tier', models.IntegerField(blank=True, db_column='endDateTier', null=True)),
                ('event_type', models.TextField(blank=True, db_column='eventType', null=True)),
                ('event_type_tier', models.IntegerField(blank=True, db_column='eventTypeTier', null=True)),
                ('test_results', models.TextField(blank=True, db_column='testResults', null=True)),
                ('test_results_tier', models.IntegerField(blank=True, db_column='testResultsTier', null=True)),
                ('time_point', models.TextField(blank=True, db_column='timePoint', null=True)),
                ('time_point_tier', models.IntegerField(blank=True, db_column='timePointTier', null=True)),
                ('recording_date', models.TextField(blank=True, db_column='recordingDate', null=True)),
                ('recording_date_tier', models.IntegerField(blank=True, db_column='recordingDateTier', null=True)),
                ('patient', models.ForeignKey(db_column='patientId', on_delete=django.db.models.deletion.DO_NOTHING, to='metadata.Patient', to_field='patient_id')),
            ],
            options={
                'db_table': 'labtest',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Immunotherapy',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('patient_id_tier', models.IntegerField(blank=True, db_column='patientIdTier', null=True)),
                ('start_date', models.TextField(blank=True, db_column='startDate', null=True)),
                ('start_date_tier', models.IntegerField(blank=True, db_column='startDateTier', null=True)),
                ('immunotherapy_type', models.TextField(blank=True, db_column='immunotherapyType', null=True)),
                ('immunotherapy_type_tier', models.IntegerField(blank=True, db_column='immunotherapyTypeTier', null=True)),
                ('immunotherapy_target', models.TextField(blank=True, db_column='immunotherapyTarget', null=True)),
                ('immunotherapy_target_tier', models.IntegerField(blank=True, db_column='immunotherapyTargetTier', null=True)),
                ('immunotherapy_detail', models.TextField(blank=True, db_column='immunotherapyDetail', null=True)),
                ('immunotherapy_detail_tier', models.IntegerField(blank=True, db_column='immunotherapyDetailTier', null=True)),
                ('treatment_plan_id', models.TextField(blank=True, db_column='treatmentPlanId', null=True)),
                ('treatment_plan_id_tier', models.IntegerField(blank=True, db_column='treatmentPlanIdTier', null=True)),
                ('course_number', models.TextField(blank=True, db_column='courseNumber', null=True)),
                ('course_number_tier', models.IntegerField(blank=True, db_column='courseNumberTier', null=True)),
                ('patient', models.ForeignKey(db_column='patientId', on_delete=django.db.models.deletion.DO_NOTHING, to='metadata.Patient', to_field='patient_id')),
            ],
            options={
                'db_table': 'immunotherapy',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('patient_id_tier', models.IntegerField(blank=True, db_column='patientIdTier', null=True)),
                ('enrollment_institution', models.TextField(blank=True, db_column='enrollmentInstitution', null=True)),
                ('enrollment_institution_tier', models.IntegerField(blank=True, db_column='enrollmentInstitutionTier', null=True)),
                ('enrollment_approval_date', models.TextField(blank=True, db_column='enrollmentApprovalDate', null=True)),
                ('enrollment_approval_date_tier', models.IntegerField(blank=True, db_column='enrollmentApprovalDateTier', null=True)),
                ('cross_enrollment', models.TextField(blank=True, db_column='crossEnrollment', null=True)),
                ('cross_enrollment_tier', models.IntegerField(blank=True, db_column='crossEnrollmentTier', null=True)),
                ('other_personalized_medicine_study_name', models.TextField(blank=True, db_column='otherPersonalizedMedicineStudyName', null=True)),
                ('other_personalized_medicine_study_name_tier', models.IntegerField(blank=True, db_column='otherPersonalizedMedicineStudyNameTier', null=True)),
                ('other_personalized_medicine_study_id', models.TextField(blank=True, db_column='otherPersonalizedMedicineStudyId', null=True)),
                ('other_personalized_medicine_study_id_tier', models.IntegerField(blank=True, db_column='otherPersonalizedMedicineStudyIdTier', null=True)),
                ('age_at_enrollment', models.TextField(blank=True, db_column='ageAtEnrollment', null=True)),
                ('age_at_enrollment_tier', models.IntegerField(blank=True, db_column='ageAtEnrollmentTier', null=True)),
                ('eligibility_category', models.TextField(blank=True, db_column='eligibilityCategory', null=True)),
                ('eligibility_category_tier', models.IntegerField(blank=True, db_column='eligibilityCategoryTier', null=True)),
                ('status_at_enrollment', models.TextField(blank=True, db_column='statusAtEnrollment', null=True)),
                ('status_at_enrollment_tier', models.IntegerField(blank=True, db_column='statusAtEnrollmentTier', null=True)),
                ('primary_oncologist_name', models.TextField(blank=True, db_column='primaryOncologistName', null=True)),
                ('primary_oncologist_name_tier', models.IntegerField(blank=True, db_column='primaryOncologistNameTier', null=True)),
                ('primary_oncologist_contact', models.TextField(blank=True, db_column='primaryOncologistContact', null=True)),
                ('primary_oncologist_contact_tier', models.IntegerField(blank=True, db_column='primaryOncologistContactTier', null=True)),
                ('referring_physician_name', models.TextField(blank=True, db_column='referringPhysicianName', null=True)),
                ('referring_physician_name_tier', models.IntegerField(blank=True, db_column='referringPhysicianNameTier', null=True)),
                ('referring_physician_contact', models.TextField(blank=True, db_column='referringPhysicianContact', null=True)),
                ('referring_physician_contact_tier', models.IntegerField(blank=True, db_column='referringPhysicianContactTier', null=True)),
                ('summary_of_id_request', models.TextField(blank=True, db_column='summaryOfIdRequest', null=True)),
                ('summary_of_id_request_tier', models.IntegerField(blank=True, db_column='summaryOfIdRequestTier', null=True)),
                ('treating_centre_name', models.TextField(blank=True, db_column='treatingCentreName', null=True)),
                ('treating_centre_name_tier', models.IntegerField(blank=True, db_column='treatingCentreNameTier', null=True)),
                ('treating_centre_province', models.TextField(blank=True, db_column='treatingCentreProvince', null=True)),
                ('treating_centre_province_tier', models.IntegerField(blank=True, db_column='treatingCentreProvinceTier', null=True)),
                ('patient', models.ForeignKey(db_column='patientId', on_delete=django.db.models.deletion.DO_NOTHING, to='metadata.Patient', to_field='patient_id')),
            ],
            options={
                'db_table': 'enrollment',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Diagnosis',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('patient_id_tier', models.IntegerField(blank=True, db_column='patientIdTier', null=True)),
                ('diagnosis_id', models.TextField(blank=True, db_column='diagnosisId', null=True, unique=True)),
                ('diagnosis_id_tier', models.IntegerField(blank=True, db_column='diagnosisIdTier', null=True)),
                ('diagnosis_date', models.TextField(blank=True, db_column='diagnosisDate', null=True)),
                ('diagnosis_date_tier', models.IntegerField(blank=True, db_column='diagnosisDateTier', null=True)),
                ('age_at_diagnosis', models.TextField(blank=True, db_column='ageAtDiagnosis', null=True)),
                ('age_at_diagnosis_tier', models.IntegerField(blank=True, db_column='ageAtDiagnosisTier', null=True)),
                ('cancer_type', models.TextField(blank=True, db_column='cancerType', null=True)),
                ('cancer_type_tier', models.IntegerField(blank=True, db_column='cancerTypeTier', null=True)),
                ('classification', models.TextField(blank=True, null=True)),
                ('classification_tier', models.IntegerField(blank=True, db_column='classificationTier', null=True)),
                ('cancer_site', models.TextField(blank=True, db_column='cancerSite', null=True)),
                ('cancer_site_tier', models.IntegerField(blank=True, db_column='cancerSiteTier', null=True)),
                ('histology', models.TextField(blank=True, null=True)),
                ('histology_tier', models.IntegerField(blank=True, db_column='histologyTier', null=True)),
                ('method_of_definitive_diagnosis', models.TextField(blank=True, db_column='methodOfDefinitiveDiagnosis', null=True)),
                ('method_of_definitive_diagnosis_tier', models.IntegerField(blank=True, db_column='methodOfDefinitiveDiagnosisTier', null=True)),
                ('sample_type', models.TextField(blank=True, db_column='sampleType', null=True)),
                ('sample_type_tier', models.IntegerField(blank=True, db_column='sampleTypeTier', null=True)),
                ('sample_site', models.TextField(blank=True, db_column='sampleSite', null=True)),
                ('sample_site_tier', models.IntegerField(blank=True, db_column='sampleSiteTier', null=True)),
                ('tumor_grade', models.TextField(blank=True, db_column='tumorGrade', null=True)),
                ('tumor_grade_tier', models.IntegerField(blank=True, db_column='tumorGradeTier', null=True)),
                ('grading_system_used', models.TextField(blank=True, db_column='gradingSystemUsed', null=True)),
                ('grading_system_used_tier', models.IntegerField(blank=True, db_column='gradingSystemUsedTier', null=True)),
                ('sites_of_metastases', models.TextField(blank=True, db_column='sitesOfMetastases', null=True)),
                ('sites_of_metastases_tier', models.IntegerField(blank=True, db_column='sitesOfMetastasesTier', null=True)),
                ('staging_system', models.TextField(blank=True, db_column='stagingSystem', null=True)),
                ('staging_system_tier', models.IntegerField(blank=True, db_column='stagingSystemTier', null=True)),
                ('version_or_edition_of_the_staging_system', models.TextField(blank=True, db_column='versionOrEditionOfTheStagingSystem', null=True)),
                ('version_or_edition_of_the_staging_system_tier', models.IntegerField(blank=True, db_column='versionOrEditionOfTheStagingSystemTier', null=True)),
                ('specific_tumor_stage_at_diagnosis', models.TextField(blank=True, db_column='specificTumorStageAtDiagnosis', null=True)),
                ('specific_tumor_stage_at_diagnosis_tier', models.IntegerField(blank=True, db_column='specificTumorStageAtDiagnosisTier', null=True)),
                ('prognostic_biomarkers', models.TextField(blank=True, db_column='prognosticBiomarkers', null=True)),
                ('prognostic_biomarkers_tier', models.IntegerField(blank=True, db_column='prognosticBiomarkersTier', null=True)),
                ('biomarker_quantification', models.TextField(blank=True, db_column='biomarkerQuantification', null=True)),
                ('biomarker_quantification_tier', models.IntegerField(blank=True, db_column='biomarkerQuantificationTier', null=True)),
                ('additional_molecular_testing', models.TextField(blank=True, db_column='additionalMolecularTesting', null=True)),
                ('additional_molecular_testing_tier', models.IntegerField(blank=True, db_column='additionalMolecularTestingTier', null=True)),
                ('additional_test_type', models.TextField(blank=True, db_column='additionalTestType', null=True)),
                ('additional_test_type_tier', models.IntegerField(blank=True, db_column='additionalTestTypeTier', null=True)),
                ('laboratory_name', models.TextField(blank=True, db_column='laboratoryName', null=True)),
                ('laboratory_name_tier', models.IntegerField(blank=True, db_column='laboratoryNameTier', null=True)),
                ('laboratory_address', models.TextField(blank=True, db_column='laboratoryAddress', null=True)),
                ('laboratory_address_tier', models.IntegerField(blank=True, db_column='laboratoryAddressTier', null=True)),
                ('site_of_metastases', models.TextField(blank=True, db_column='siteOfMetastases', null=True)),
                ('site_of_metastases_tier', models.IntegerField(blank=True, db_column='siteOfMetastasesTier', null=True)),
                ('staging_system_version', models.TextField(blank=True, db_column='stagingSystemVersion', null=True)),
                ('staging_system_version_tier', models.IntegerField(blank=True, db_column='stagingSystemVersionTier', null=True)),
                ('specific_stage', models.TextField(blank=True, db_column='specificStage', null=True)),
                ('specific_stage_tier', models.IntegerField(blank=True, db_column='specificStageTier', null=True)),
                ('cancer_specific_biomarkers', models.TextField(blank=True, db_column='cancerSpecificBiomarkers', null=True)),
                ('cancer_specific_biomarkers_tier', models.IntegerField(blank=True, db_column='cancerSpecificBiomarkersTier', null=True)),
                ('additional_molecular_diagnostic_testing_performed', models.TextField(blank=True, db_column='additionalMolecularDiagnosticTestingPerformed', null=True)),
                ('additional_molecular_diagnostic_testing_performed_tier', models.IntegerField(blank=True, db_column='additionalMolecularDiagnosticTestingPerformedTier', null=True)),
                ('additional_test', models.TextField(blank=True, db_column='additionalTest', null=True)),
                ('additional_test_tier', models.IntegerField(blank=True, db_column='additionalTestTier', null=True)),
                ('patient', models.ForeignKey(db_column='patientId', on_delete=django.db.models.deletion.DO_NOTHING, to='metadata.Patient', to_field='patient_id')),
            ],
            options={
                'db_table': 'diagnosis',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Consent',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('patient_id_tier', models.IntegerField(blank=True, db_column='patientIdTier', null=True)),
                ('consent_id', models.TextField(blank=True, db_column='consentId', null=True)),
                ('consent_id_tier', models.IntegerField(blank=True, db_column='consentIdTier', null=True)),
                ('consent_date', models.TextField(blank=True, db_column='consentDate', null=True)),
                ('consent_date_tier', models.IntegerField(blank=True, db_column='consentDateTier', null=True)),
                ('consent_version', models.TextField(blank=True, db_column='consentVersion', null=True)),
                ('consent_version_tier', models.IntegerField(blank=True, db_column='consentVersionTier', null=True)),
                ('patient_consented_to', models.TextField(blank=True, db_column='patientConsentedTo', null=True)),
                ('patient_consented_to_tier', models.IntegerField(blank=True, db_column='patientConsentedToTier', null=True)),
                ('reason_for_rejection', models.TextField(blank=True, db_column='reasonForRejection', null=True)),
                ('reason_for_rejection_tier', models.IntegerField(blank=True, db_column='reasonForRejectionTier', null=True)),
                ('was_assent_obtained', models.TextField(blank=True, db_column='wasAssentObtained', null=True)),
                ('was_assent_obtained_tier', models.IntegerField(blank=True, db_column='wasAssentObtainedTier', null=True)),
                ('date_of_assent', models.TextField(blank=True, db_column='dateOfAssent', null=True)),
                ('date_of_assent_tier', models.IntegerField(blank=True, db_column='dateOfAssentTier', null=True)),
                ('assent_form_version', models.TextField(blank=True, db_column='assentFormVersion', null=True)),
                ('assent_form_version_tier', models.IntegerField(blank=True, db_column='assentFormVersionTier', null=True)),
                ('if_assent_not_obtained_why_not', models.TextField(blank=True, db_column='ifAssentNotObtainedWhyNot', null=True)),
                ('if_assent_not_obtained_why_not_tier', models.IntegerField(blank=True, db_column='ifAssentNotObtainedWhyNotTier', null=True)),
                ('reconsent_date', models.TextField(blank=True, db_column='reconsentDate', null=True)),
                ('reconsent_date_tier', models.IntegerField(blank=True, db_column='reconsentDateTier', null=True)),
                ('reconsent_version', models.TextField(blank=True, db_column='reconsentVersion', null=True)),
                ('reconsent_version_tier', models.IntegerField(blank=True, db_column='reconsentVersionTier', null=True)),
                ('consenting_coordinator_name', models.TextField(blank=True, db_column='consentingCoordinatorName', null=True)),
                ('consenting_coordinator_name_tier', models.IntegerField(blank=True, db_column='consentingCoordinatorNameTier', null=True)),
                ('previously_consented', models.TextField(blank=True, db_column='previouslyConsented', null=True)),
                ('previously_consented_tier', models.IntegerField(blank=True, db_column='previouslyConsentedTier', null=True)),
                ('name_of_other_biobank', models.TextField(blank=True, db_column='nameOfOtherBiobank', null=True)),
                ('name_of_other_biobank_tier', models.IntegerField(blank=True, db_column='nameOfOtherBiobankTier', null=True)),
                ('has_consent_been_withdrawn', models.TextField(blank=True, db_column='hasConsentBeenWithdrawn', null=True)),
                ('has_consent_been_withdrawn_tier', models.IntegerField(blank=True, db_column='hasConsentBeenWithdrawnTier', null=True)),
                ('date_of_consent_withdrawal', models.TextField(blank=True, db_column='dateOfConsentWithdrawal', null=True)),
                ('date_of_consent_withdrawal_tier', models.IntegerField(blank=True, db_column='dateOfConsentWithdrawalTier', null=True)),
                ('type_of_consent_withdrawal', models.TextField(blank=True, db_column='typeOfConsentWithdrawal', null=True)),
                ('type_of_consent_withdrawal_tier', models.IntegerField(blank=True, db_column='typeOfConsentWithdrawalTier', null=True)),
                ('reason_for_consent_withdrawal', models.TextField(blank=True, db_column='reasonForConsentWithdrawal', null=True)),
                ('reason_for_consent_withdrawal_tier', models.IntegerField(blank=True, db_column='reasonForConsentWithdrawalTier', null=True)),
                ('consent_form_complete', models.TextField(blank=True, db_column='consentFormComplete', null=True)),
                ('consent_form_complete_tier', models.IntegerField(blank=True, db_column='consentFormCompleteTier', null=True)),
                ('patient', models.ForeignKey(db_column='patientId', on_delete=django.db.models.deletion.DO_NOTHING, to='metadata.Patient', to_field='patient_id')),
            ],
            options={
                'db_table': 'consent',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Complication',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('patient_id_tier', models.IntegerField(blank=True, db_column='patientIdTier', null=True)),
                ('date', models.TextField(blank=True, null=True)),
                ('date_tier', models.IntegerField(blank=True, db_column='dateTier', null=True)),
                ('late_complication_of_therapy_developed', models.TextField(blank=True, db_column='lateComplicationOfTherapyDeveloped', null=True)),
                ('late_complication_of_therapy_developed_tier', models.IntegerField(blank=True, db_column='lateComplicationOfTherapyDevelopedTier', null=True)),
                ('late_toxicity_detail', models.TextField(blank=True, db_column='lateToxicityDetail', null=True)),
                ('late_toxicity_detail_tier', models.IntegerField(blank=True, db_column='lateToxicityDetailTier', null=True)),
                ('suspected_treatment_induced_neoplasm_developed', models.TextField(blank=True, db_column='suspectedTreatmentInducedNeoplasmDeveloped', null=True)),
                ('suspected_treatment_induced_neoplasm_developed_tier', models.IntegerField(blank=True, db_column='suspectedTreatmentInducedNeoplasmDevelopedTier', null=True)),
                ('treatment_induced_neoplasm_details', models.TextField(blank=True, db_column='treatmentInducedNeoplasmDetails', null=True)),
                ('treatment_induced_neoplasm_details_tier', models.IntegerField(blank=True, db_column='treatmentInducedNeoplasmDetailsTier', null=True)),
                ('patient', models.ForeignKey(db_column='patientId', on_delete=django.db.models.deletion.DO_NOTHING, to='metadata.Patient', to_field='patient_id')),
            ],
            options={
                'db_table': 'complication',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Chemotherapy',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('patient_id_tier', models.IntegerField(blank=True, db_column='patientIdTier', null=True)),
                ('course_number', models.TextField(blank=True, db_column='courseNumber', null=True)),
                ('course_number_tier', models.IntegerField(blank=True, db_column='courseNumberTier', null=True)),
                ('start_date', models.TextField(blank=True, db_column='startDate', null=True)),
                ('start_date_tier', models.IntegerField(blank=True, db_column='startDateTier', null=True)),
                ('stop_date', models.TextField(blank=True, db_column='stopDate', null=True)),
                ('stop_date_tier', models.IntegerField(blank=True, db_column='stopDateTier', null=True)),
                ('systematic_therapy_agent_name', models.TextField(blank=True, db_column='systematicTherapyAgentName', null=True)),
                ('systematic_therapy_agent_name_tier', models.IntegerField(blank=True, db_column='systematicTherapyAgentNameTier', null=True)),
                ('route', models.TextField(blank=True, null=True)),
                ('route_tier', models.IntegerField(blank=True, db_column='routeTier', null=True)),
                ('dose', models.TextField(blank=True, null=True)),
                ('dose_tier', models.IntegerField(blank=True, db_column='doseTier', null=True)),
                ('dose_frequency', models.TextField(blank=True, db_column='doseFrequency', null=True)),
                ('dose_frequency_tier', models.IntegerField(blank=True, db_column='doseFrequencyTier', null=True)),
                ('dose_unit', models.TextField(blank=True, db_column='doseUnit', null=True)),
                ('dose_unit_tier', models.IntegerField(blank=True, db_column='doseUnitTier', null=True)),
                ('days_per_cycle', models.TextField(blank=True, db_column='daysPerCycle', null=True)),
                ('days_per_cycle_tier', models.IntegerField(blank=True, db_column='daysPerCycleTier', null=True)),
                ('number_of_cycle', models.TextField(blank=True, db_column='numberOfCycle', null=True)),
                ('number_of_cycle_tier', models.IntegerField(blank=True, db_column='numberOfCycleTier', null=True)),
                ('treatment_intent', models.TextField(blank=True, db_column='treatmentIntent', null=True)),
                ('treatment_intent_tier', models.IntegerField(blank=True, db_column='treatmentIntentTier', null=True)),
                ('treating_centre_name', models.TextField(blank=True, db_column='treatingCentreName', null=True)),
                ('treating_centre_name_tier', models.IntegerField(blank=True, db_column='treatingCentreNameTier', null=True)),
                ('type', models.TextField(blank=True, null=True)),
                ('type_tier', models.IntegerField(blank=True, db_column='typeTier', null=True)),
                ('protocol_code', models.TextField(blank=True, db_column='protocolCode', null=True)),
                ('protocol_code_tier', models.IntegerField(blank=True, db_column='protocolCodeTier', null=True)),
                ('recording_date', models.TextField(blank=True, db_column='recordingDate', null=True)),
                ('recording_date_tier', models.IntegerField(blank=True, db_column='recordingDateTier', null=True)),
                ('treatment_plan_id', models.TextField(blank=True, db_column='treatmentPlanId', null=True)),
                ('treatment_plan_id_tier', models.IntegerField(blank=True, db_column='treatmentPlanIdTier', null=True)),
                ('patient', models.ForeignKey(db_column='patientId', on_delete=django.db.models.deletion.DO_NOTHING, to='metadata.Patient', to_field='patient_id')),
            ],
            options={
                'db_table': 'chemotherapy',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
        migrations.CreateModel(
            name='Celltransplant',
            fields=[
                ('id', models.TextField(primary_key=True, serialize=False)),
                ('attributes', models.TextField(blank=True, null=True)),
                ('dataset_id', models.TextField(db_column='datasetId')),
                ('created', models.TextField()),
                ('updated', models.TextField(blank=True, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('patient_id_tier', models.IntegerField(blank=True, db_column='patientIdTier', null=True)),
                ('start_date', models.TextField(blank=True, db_column='startDate', null=True)),
                ('start_date_tier', models.IntegerField(blank=True, db_column='startDateTier', null=True)),
                ('cell_source', models.TextField(blank=True, db_column='cellSource', null=True)),
                ('cell_source_tier', models.IntegerField(blank=True, db_column='cellSourceTier', null=True)),
                ('donor_type', models.TextField(blank=True, db_column='donorType', null=True)),
                ('donor_type_tier', models.IntegerField(blank=True, db_column='donorTypeTier', null=True)),
                ('treatment_plan_id', models.TextField(blank=True, db_column='treatmentPlanId', null=True)),
                ('treatment_plan_id_tier', models.IntegerField(blank=True, db_column='treatmentPlanIdTier', null=True)),
                ('course_number', models.TextField(blank=True, db_column='courseNumber', null=True)),
                ('course_number_tier', models.IntegerField(blank=True, db_column='courseNumberTier', null=True)),
                ('patient', models.ForeignKey(db_column='patientId', on_delete=django.db.models.deletion.DO_NOTHING, to='metadata.Patient', to_field='patient_id')),
            ],
            options={
                'db_table': 'celltransplant',
                'unique_together': {('dataset_id', 'name')},
            },
        ),
    ]
